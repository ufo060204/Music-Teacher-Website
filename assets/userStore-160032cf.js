import{d as I}from"./pinia-ef994b1a.js";import{b as y}from"./index.esm2017-42eb0bcd.js";import{g as A,G as T,S as l,a as h,j as k,k as M,d as c,s as f,l as B,m as P,o as w,e as u,u as m,b as R,c as E,h as p,q as C,n as D}from"./sweetalert2.all-761e58cf.js";import{m as U}from"./moment-920fd100.js";const i=A(),F=new T,n=l.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:1500,timerProgressBar:!0,didOpen:s=>{s.addEventListener("mouseenter",l.stopTimer),s.addEventListener("mouseleave",l.resumeTimer)}}),J=I("usersStore",{state:()=>({singUpData:{email:"",password:""},loginUser:{email:"",password:""},userData:{uid:"",userPhoto:"",userBackgroundPhoto:"",displayName:"",email:"",tel:"",gender:"",facebook:"",instagrm:"",discord:"",birthday:"",address:"",story:"",userIntro:"",creationTime:"",lastSignInTime:"",courses_created:[],courses_joined:[],coursesCollection:[],cart:[]},userDataAll:{},personalViewData:{},coursesJoined:[],coursesCreated:[],coursesCollection:[],coursesCollectionId:[],isLoading:!0,isLogin:!0,isMember:!1,uid:"",isEditMode:!1,updateNameStatus:!1,updateStoryStatus:!1,buyerStudyTimeData:[],myStudyTimeData:[],updateBuyerStudyTimeUid:"",updateBuyerStudyTimeCourseId:"",buyerStudyTime:"",buyerStudyTimeAll:[]}),actions:{signUp(){const s=h();k(s,this.singUpData.email,this.singUpData.password).then(e=>{console.log("userCredential.user",e.user),this.userData.uid=e.user.uid,this.userData.email=e.user.email,console.log("這是準備傳送的 userData",this.userData),this.setUserData(),this.checkMemberObserver(),this.singUpData.email="",this.singUpData.password="",y.push("/"),l.fire({icon:"success",title:"恭喜註冊成功",showConfirmButton:!1,timer:1500})}).catch(e=>{console.log("你註冊失敗了",e.code),console.log("你註冊失敗了",e.message),e.code==="auth/email-already-in-use"?l.fire({icon:"error",title:"你註冊失敗了",text:"此 email 已被使用過",confirmButtonColor:"#FE715F"}):l.fire({icon:"error",title:"你註冊失敗了",confirmButtonColor:"#FE715F"})})},login(){const s=h();M(s,this.loginUser.email,this.loginUser.password).then(e=>{console.log(e.user);const t=c(i,"users",e.user.uid);f(t,{lastSignInTime:e.user.metadata.lastSignInTime},{merge:!0}),console.log("更新最後登入時間"),this.isMember=!0,this.loginUser.email="",this.loginUser.password="",console.log("登入成功"),l.fire({icon:"success",title:"登入成功",showConfirmButton:!1,timer:1500}),y.push("/")}).catch(e=>{console.log(e.code),console.log(e.message),console.log("登入失敗"),l.fire({icon:"error",title:"登入失敗",showConfirmButton:!1,timer:1500})})},loginGoogle(){const s=h();B(s,F).then(e=>{const o=T.credentialFromResult(e).accessToken;if(console.log("token",o),console.log(e.user),console.log(e.user.metadata),console.log("創建時間",e.user.metadata.creationTime),console.log("登入時間",e.user.metadata.lastSignInTime),this.isMember=!0,e.user.metadata.creationTime===e.user.metadata.lastSignInTime)this.userData.uid=e.user.uid,this.userData.email=e.user.email,this.userData.creationTime=e.user.metadata.creationTime,this.userData.lastSignInTime=e.user.metadata.lastSignInTime,console.log("這是第一次登入"),console.log("這是準備傳送的 userData",this.userData),this.setUserData();else{const a=c(i,"users",e.user.uid);f(a,{lastSignInTime:e.user.metadata.lastSignInTime},{merge:!0}),console.log("更新最後登入時間")}y.push("/"),this.getUserDataAll(),n.fire({icon:"success",title:"使用google登入成功"})}).catch(e=>{console.log(e.code),console.log(e.message),console.log(e.customData.email),console.log(T.credentialFromError(e)),n.fire({icon:"error",title:"使用 google 登入失敗"})})},signOut(){const s=h();P(s).then(e=>{console.log("登出成功",e),this.isMember=!1,n.fire({icon:"success",title:"登出成功"})}).catch(e=>{console.log("登出錯誤",e),n.fire({icon:"warning",title:"登出錯誤"})})},async setUserData(){try{await f(c(i,"users",this.userData.uid),this.userData),console.log("課程會員新增資料成功"),n.fire({icon:"success",title:"課程會員新增資料成功"})}catch(s){console.log("課程會員資料新增失敗",s),n.fire({icon:"error",title:"課程會員資料新增失敗"})}},async checkMemberObserver(){return new Promise((s,e)=>{const t=h();w(t,o=>{o?(this.isMember=!0,this.uid=o.uid,s(this.uid),this.getUserDataAll()):o?(e(new Error("你是登出狀態")),this.isMember=!1):(this.isMember=!1,console.log("你是登出狀態"))})})},checkMemberTeacherStep(){const s=h();w(s,e=>{e||(y.push("/login"),l.fire({icon:"info",title:"請先登入",confirmButtonColor:"#FE715F"}))})},async getUserDataAll(){try{const s=c(i,"users",this.uid),e=await u(s);e.exists()?(console.log("會員資料 Document data:",e.data()),this.userData=e.data(),this.personalViewData={...this.userData}):console.log("No such document!")}catch(s){console.log(s)}},async updateUserData(){await m(c(i,"users",this.userData.uid),this.userData);try{this.isEditMode=!1,console.log("資料更新成功"),this.getUserDataAll(),n.fire({icon:"success",title:"會員資料更新成功"})}catch(s){console.log("資料更新失敗",s),n.fire({icon:"error",title:"會員資料更新失敗"})}},async updateUserPhoto(s,e){try{const t=e.target.files[0];if(!t||!(await this.beforeUpdate(t)).isValid)return;this.imgHandle(s,t)}catch(t){console.log(t)}finally{e.target.value=null}},beforeUpdate(s){return new Promise(e=>{const t=["image/jpeg","image/png"];console.log("圖片格式",s.type);const o=t.includes(s.type),a=s.size/1024/1024<.15;o?a||l.fire({icon:"error",title:"尺寸錯誤",text:"圖片大小需小於 0.15 MB"}):l.fire({icon:"error",title:"格式錯誤",text:"請上傳 JPG 或 PNG 檔"}),e({isValid:o&&a})})},imgHandle(s,e){const t=new FormData;t.append("photoFile",e);const o=t.get("photoFile"),a=new FileReader;a.readAsDataURL(o),a.onload=r=>{s==="course"?(this.teacherData.courseImg=r.target.result,console.log("課程圖片連結",this.teacherData.courseImg),n.fire({icon:"success",title:"課程圖片更新成功"})):s==="teacher"?(this.userData.userPhoto=r.target.result,console.log("老師圖片連結",this.userData.userPhoto),m(c(i,"users",this.userData.uid),this.userData),n.fire({icon:"success",title:"使用者圖片更新成功"})):s==="background"&&(this.userData.userBackgroundPhoto=r.target.result,console.log("老師圖片連結",this.userData.userPhoto),m(c(i,"users",this.userData.uid),this.userData),n.fire({icon:"success",title:"背景圖片更新成功"}))}},async getUserAllCreated(){await this.checkMemberObserver();const s=c(i,"users",this.uid);u(s).then(e=>{if(e.exists()){const t=e.get("courses_created"),o=[];return t.forEach(a=>{o.push(u(a))}),Promise.all(o)}else return console.log("使用者 document 不存在(老師)"),[]}).then(e=>{this.coursesCreated=e.map(t=>t.data()),console.log("使用者開立的課程:",this.coursesCreated)}).catch(e=>{console.error("沒有符合的開課:",e)})},async addToCollection(s){if(!this.isMember){l.fire({icon:"info",title:"請先登入",confirmButtonColor:"#FE715F"});return}const e=c(i,"AllCourses",s),t=c(i,"users",this.userData.uid);await m(t,{coursesCollection:R(e)},{merge:!0});try{this.getUserAllCollection(),console.log("加入收藏成功"),n.fire({icon:"success",title:"加入收藏成功"})}catch(o){console.log("加入收藏失敗",o),n.fire({icon:"error",title:"加入收藏失敗"})}},async removeFromCollection(s){const e=c(i,"AllCourses",s),t=c(i,"users",this.userData.uid);await m(t,{coursesCollection:E(e)},{merge:!0});try{this.getUserAllCollection(),console.log("移除收藏成功"),n.fire({icon:"success",title:"移除收藏成功"})}catch(o){console.log("移除收藏失敗",o),n.fire({icon:"error",title:"移除收藏失敗"})}},async getUserAllCollection(){await this.checkMemberObserver();const s=c(i,"users",this.uid);u(s).then(e=>{if(e.exists()){const t=e.get("coursesCollection"),o=[];return t.forEach(a=>{o.push(u(a))}),Promise.all(o)}else console.log("使用者 document 不存在(收藏)")}).then(async e=>{this.coursesCollection=await Promise.all(e.map(async t=>{const o=t.data(),a=t.data().teacherId,r=await this.getTeacherDisplayName(a);return{...o,teacherDisplayName:r}})),this.coursesCollectionId=e.map(t=>t.data().courseId),console.log("使用者收藏的課程",this.coursesCollection),console.log("使用者收藏的課程 id",this.coursesCollectionId)}).catch(e=>{console.error("沒有符合的收藏:",e)})},async getUserAllJoin(){this.isLoading=!0,await this.checkMemberObserver();const s=c(i,"users",this.uid);u(s).then(e=>{if(e.exists()){const t=e.get("courses_joined"),o=[];return t.forEach(a=>{o.push(u(a))}),Promise.all(o)}else console.log("使用者 document 不存在(收藏)")}).then(async e=>{this.coursesJoined=await Promise.all(e.map(async t=>{const o=t.data(),a=t.data().teacherId,r=await this.getTeacherDisplayName(a);return{...o,teacherDisplayName:r}})),console.log("使用者參加的課程",this.coursesJoined),this.isLoading=!1}).catch(e=>{console.error("沒有符合的課程:",e)})},async getTeacherDisplayName(s){try{const e=await u(s);return e.exists()&&e.data().displayName||"Unknown Teacher"}catch(e){return console.error("獲取老師資料失敗",e),"Unknown Teacher"}},toggleCollection(s){this.coursesCollectionId.indexOf(s)>-1?(this.removeFromCollection(s),console.log("courseId 存在")):(this.addToCollection(s),console.log(" courseId 不存在"))},async getBuyer(s){const e=p(i,"AllCourses",s,"buyerStudyTime"),t=C(e);(await D(t)).forEach(async a=>{const r={},g=c(i,"users",a.id),b=(await u(g)).data();r.uid=a.id,r.courseId=s,r.studyTime=a.data().studyTime,r.createdTime=a.data().createdTime,r.displayName=b.displayName,this.buyerStudyTimeData.push(r)}),console.log("buyerStudyTimeData 數據",this.buyerStudyTimeData)},async getMyStudyTime(s){await this.checkMemberObserver();const e=p(i,"AllCourses",s,"buyerStudyTime"),t=C(e);(await D(t)).forEach(async a=>{a.id===this.uid&&this.myStudyTimeData.push(a.data()),console.log("我的上課時間",this.myStudyTimeData)})},closeBuyTimeModal(){this.buyerStudyTimeData=[],this.myStudyTimeData=[]},beforeUpdateBuyerStudyTime(s,e){this.updateBuyerStudyTimeCourseId=s,this.updateBuyerStudyTimeUid=e,console.log("準備更新的上課時間對象",this.updateBuyerStudyTimeCourseId,this.updateBuyerStudyTimeUid)},async updateBuyerStudyTime(){console.log(this.buyerStudyTimeData);const s=c(i,"AllCourses",this.updateBuyerStudyTimeCourseId,"buyerStudyTime",this.updateBuyerStudyTimeUid);try{await m(s,{studyTime:this.buyerStudyTime}),this.buyerStudyTimeData=[],console.log("上課時間更新成功"),n.fire({icon:"success",title:"上課時間更新成功"})}catch(e){console.error("上課時間更新失敗：",e),n.fire({icon:"error",title:"上課時間更新失敗"})}},async getUserAllJoinStudyTime(){await this.checkMemberObserver();const s=c(i,"users",this.uid);u(s).then(async e=>{e.exists()?((await e.get("courses_joined")).map(async o=>{const a={},r=await u(o);a.title=r.data().name;const g=o.id;a.courseId=g;const S=p(i,"AllCourses",g,"buyerStudyTime");(await D(S)).forEach(async d=>{console.log("item.data",d.id,d.data()),d.id===this.uid&&d.data().studyTime&&(a.start=U(d.data().studyTime).format("YYYY-MM-DD HH:mm"),a.end=U(d.data().studyTime).add(r.data().time,"minute").format("YYYY-MM-DD HH:mm"))}),this.buyerStudyTimeAll.push(a)}),console.log("使用者上課時間",this.buyerStudyTimeAll)):console.log("使用者 document 不存在(收藏)")}).catch(e=>{console.error("取得使用者文檔出錯:",e)})}},getters:{collectionStatus(){return this.getUserAllCollection(),s=>this.coursesCollectionId.indexOf(s)>-1?"bookmark":"bookmark_border"}}});export{J as u};
